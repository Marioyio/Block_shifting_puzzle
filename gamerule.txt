请编写一个有图形界面的方块解谜游戏，包括：
- 起始进入游戏界面，包含设置按钮，开始游戏
- 点击设置进入设置界面（暂时无设置项，但程序设计中应当使得其能够后续添加）
- 点击开始游戏进入选大关界面，文档读取level-folders文件夹的关卡，关卡由levels.txt决定。levels.txt分为若干段，游戏启动前会将它们都读取进入游戏。
levels.txt的每一段包括：

scope=1; scope_name='xxx'; total_levels=25; # 大关，大关名字，小关数量
begin level 1
[...] # 关卡内容
end level 1
begin level 2
[...] # 关卡内容
end level 2
...

选大关界面可以点击左侧的左三角或者右侧的右三角翻到上一大关，下一大关，每个大关由一个方框表示，内部上方是关卡名，如“1.xxx”，左下角是一个图标（可以先省略），右下角显示已通关数：x/y。
点击大关方框进入小关选关界面，也可以翻页，一页显示2行4列共8关。每个关卡方框中会留有该关卡缩略图（可以通过关卡内容渲染），下方是关卡序号（如1-1）。
 

- 建议给每个界面一个状态名。例如：start，choose_scope，choose_level，in_level_chooseblock，in_level_shift，congrats。
每一关的任务如下：
- 玩家面前显示一个由若干个单位方块拼接成为的图形。单位方块有若干种形状，这会导致block这一对象有不同的type。我们先指定一种type：1（type应当是不小于1的正整数），表示普通方块。普通方块的图形绘制方法为：size*size的黑色正方形边框（粗细度合理即可，例如size/15），其中心(0.125 * size , 0.875 * size)的地方为一个实心黑色正方形。关卡内容下方首先显示本关卡的名称（x-y），居于左侧，大字；接下来更小的字体逐条显示本关卡的限制。
限制的形式为逐条列出：例如：
[胶水]选中的方块需要是连通的
[镜子]所得图形需要是轴对称图形
...
- 玩家需要依次用鼠标选择若干个方块（用柔和半透明的绿光区域表示选中的方块），按住鼠标的情况下一直拖动可以选择一系列方块。分多次选择的方块可以累加右下角的重置按钮取消本关所有操作，撤销按钮撤销上一次选中的方块组合，重做按钮撤销上一次的撤销，确认按钮表示选择已经确认。
- 在玩家确认选择的方块之后，程序此时需要检查是否满足本关中一切对选择方块集合的限制（如：胶水）。当至少一个限制不满足的时候，需要将所有不被满足的限制条目上加入红色半透明闪光，并且此时不会进入下一阶段。玩家需要重新选择方块。
- 在玩家确认选择的方块之后进入平移阶段，玩家鼠标置于任何一个已经被选中的方块上，拖动后所有的被选中方块会跟着整体移动。它们连带着绿色光影被一起拖动，拖动过程中总是被吸附到整单位格子，并且与已有的方块产生重叠的时候整体闪光会变红。鼠标松开的时候，如果是变红的非法位置会将其移动回原位，否则认为拖动有效，保留拖动的结果。
- 在有效拖动之后，程序将会立即判定所有对所得图形的限制是否被满足（如：镜子），满足时进入通关界面，可以选择下一关或者返回选关界面。不满足时同样应当立刻标红对应条目，并且将被拖动对象移动到原位置。此时按下重置会回到没有选方块的关卡初始状态。
- 选择下一关的时候如果已经是本大关最后一关，应当选到下一大陆第一关。若不再有下一大陆则没有下一关选项，只能返回选关，并且提示会变为恭喜通关。

levels.txt的关卡内容应当如下：
limit glue
limit ...#关卡限制，解读器和限制命名应当在程序内部实现，判别限制是否满足的函数应当拥有此字段作为输入。应当定义blockset对象表示一组block，定义block对象表示block，将它们分装到game.py外面，尽量缩小单个程序的长度。这样判别限制是否满足的函数也可以在game.py外面。
block{type=1,pos=(0,0)}
block{type=1,pos=(0,1)}
block{type=1,pos=(0,-1)}
...
# 定义每个方块的各个属性，没有被写出的属性应当被block.init自动填充

